import math, random

particlesNumber = 4 #30
sqSideLength = 200
maxStartingSpeed = 10
epsilon = 1.7
sigma = 3
maxRay = 2.5 * sigma
universe = []  # List of particles x, y coordinates
speedList = []  # List of particle's speed correlated to universe
forceList = []
timeStep = 0.01
steps = 10000
k = 10
rEq = 12

#Energy & Potentials
totHOpot = 0.0
totLJpot = 0.0
totKener = 0.0
totENERGY = 0.0

fileEnergy = open("2D_HarmOsc_LJ_ENERGY.txt", "wt")
file = open("2D_HarmOsc_LJ.xyz", "wt")  # Create or overwrites a file
file.write("%s \n\n" % (particlesNumber + 4))  # First line of xyz file
file.write("Cl       %s      %s      0.00000\n" % (sqSideLength / 2, sqSideLength / 2))
file.write("Cl       %s      %s      0.00000\n" % (sqSideLength / 2, -sqSideLength / 2))
file.write("Cl       %s      %s      0.00000\n" % (-sqSideLength / 2, sqSideLength / 2))
file.write("Cl       %s      %s      0.00000\n" % (-sqSideLength / 2, -sqSideLength / 2))

def main():
    #particleDisposition()
    particleDispositionTEST()
    #specialParticleDisposition(sigma + 5)
    stepProcedure(universe, speedList, forceList, totKener, totHOpot, totLJpot, totENERGY)


def particleDisposition():
    for particle in range(int(particlesNumber/2)):  # This will generate x and y coordinates for each and also speed vectors
            particleCoord = []
            particleCoord.append(random.uniform(- sqSideLength / 2, sqSideLength / 2))
            particleCoord.append(random.uniform(- sqSideLength / 2, sqSideLength / 2))
            particleSpeed = []
            particleSpeed.append(random.uniform(-maxStartingSpeed, maxStartingSpeed))
            particleSpeed.append(random.uniform(-maxStartingSpeed, maxStartingSpeed))
            forceList.append([0, 0])
            universe.append(particleCoord)
            speedList.append(particleSpeed)
            file.write("O       %s      %s      0.00000\n" % (universe[particle][0], universe[particle][1]))

            secParticleCoord = []
            secParticleCoord.append(random.uniform(particleCoord[0] - rEq, particleCoord[0] + rEq))
            secParticleCoord.append(random.uniform(particleCoord[1] - rEq, particleCoord[1] + rEq))
            particleSpeed = []
            particleSpeed.append(random.uniform(-maxStartingSpeed, maxStartingSpeed))
            particleSpeed.append(random.uniform(-maxStartingSpeed, maxStartingSpeed))
            forceList.append([0, 0])
            universe.append(secParticleCoord)
            speedList.append(particleSpeed)
            file.write("O       %s      %s      0.00000\n" % (universe[particle][0], universe[particle][1]))

def specialParticleDisposition(minDist): # Particles are always far enough
    global particlesNumber
    maxAttempt = 10
    particleCoord = []
    particleCoord.append(random.uniform(- sqSideLength / 2, sqSideLength / 2))
    particleCoord.append(random.uniform(- sqSideLength / 2, sqSideLength / 2))
    particleSpeed = []
    particleSpeed.append(random.uniform(-maxStartingSpeed, maxStartingSpeed))
    particleSpeed.append(random.uniform(-maxStartingSpeed, maxStartingSpeed))
    forceList.append([0, 0])
    universe.append(particleCoord)
    speedList.append(particleSpeed)
    file.write("O       %s      %s      0.00000\n" % (universe[0][0], universe[0][1]))

    for particle in range(particlesNumber):  # This will generate x and y coordinates for each and also speed vectors
        if maxAttempt == 0:
            break
        particleCoord = []
        particleCoord.append(random.uniform(- sqSideLength / 2, sqSideLength / 2))
        particleCoord.append(random.uniform(- sqSideLength / 2, sqSideLength / 2))
        universe.append(particleCoord)
        for part in range(len(universe)):
            if shortestDistance(particleCoord, universe[part])[0] < minDist and maxAttempt != 0:
                print("low dist")
                maxAttempt -= 1
                print(maxAttempt)
                del universe[-1]
                break
            elif shortestDistance(particleCoord, universe[part])[0] >= minDist and maxAttempt != 0:
                print("ok dist")
                particleSpeed = []
                particleSpeed.append(random.uniform(-maxStartingSpeed, maxStartingSpeed))
                particleSpeed.append(random.uniform(-maxStartingSpeed, maxStartingSpeed))
                forceList.append([0, 0])
                speedList.append(particleSpeed)
                file.write("O       %s      %s      0.00000\n" % (universe[len(universe)-1][0], universe[len(universe)-1][1]))
                maxAttempt = 10
                break
            elif maxAttempt == 0:
                del universe[-1]
                print("end attempts")
                break
    particlesNumber = len(universe)
    print(len(universe))
    print(len(speedList))

def particleDispositionTEST():
    universe.append([6, 0])
    universe.append([-6, 0])
    universe.append([8, 4])
    universe.append([-4, 4])
    speedList.append([0, 3])
    speedList.append([0, 3])
    speedList.append([0, 0])
    speedList.append([0, 0])
    forceList.append([0, 0])
    forceList.append([0, 0])
    forceList.append([0, 0])
    forceList.append([0, 0])
    file.write("O       %s      %s      0.00000\n" % (universe[0][0], universe[0][1]))
    file.write("O       %s      %s      0.00000\n" % (universe[1][0], universe[1][1]))
    file.write("O       %s      %s      0.00000\n" % (universe[2][0], universe[2][1]))
    file.write("O       %s      %s      0.00000\n" % (universe[3][0], universe[3][1]))

def shortestDistance(p1, p2): #Defines which is the shortest distance for the particles
    relp2 = []
    relDeltaX = [abs(p1[0] - p2[0])]
    if p1[0] >= 0 and p1[1] >= 0: #p1 in first quadrant
        relp2.append(math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2))
        relp2.append(math.sqrt((p1[0] - (p2[0] + sqSideLength)) ** 2 + (p1[1] - p2[1]) ** 2))
        relp2.append(math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - (p2[1] + sqSideLength)) ** 2))
        relp2.append(math.sqrt((p1[0] - (p2[0] + sqSideLength)) ** 2 + (p1[1] - (p2[1] + sqSideLength)) ** 2))
        relDeltaX.append(abs(p1[0] - (p2[0] + sqSideLength)))
    elif p1[0] < 0 and p1[1] >= 0: #p1 in second quadrant
        relp2.append(math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2))
        relp2.append(math.sqrt((p1[0] - (p2[0] - sqSideLength)) ** 2 + (p1[1] - p2[1]) ** 2))
        relp2.append(math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - (p2[1] + sqSideLength)) ** 2))
        relp2.append(math.sqrt((p1[0] - (p2[0] - sqSideLength)) ** 2 + (p1[1] - (p2[1] + sqSideLength)) ** 2))
        relDeltaX.append(abs(p1[0] - (p2[0] - sqSideLength)))
    elif p1[0] < 0 and p1[1] < 0: #p1 in third quadrant
        relp2.append(math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2))
        relp2.append(math.sqrt((p1[0] - (p2[0] - sqSideLength)) ** 2 + (p1[1] - p2[1]) ** 2))
        relp2.append(math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - (p2[1] - sqSideLength)) ** 2))
        relp2.append(math.sqrt((p1[0] - (p2[0] - sqSideLength)) ** 2 + (p1[1] - (p2[1] - sqSideLength)) ** 2))
        relDeltaX.append(abs(p1[0] - (p2[0] - sqSideLength)))
    elif p1[0] >= 0 and p1[1] < 0: #p1 in fourth quadrant
        relp2.append(math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2))
        relp2.append(math.sqrt((p1[0] - (p2[0] + sqSideLength)) ** 2 + (p1[1] - p2[1]) ** 2))
        relp2.append(math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - (p2[1] - sqSideLength)) ** 2))
        relp2.append(math.sqrt((p1[0] - (p2[0] + sqSideLength)) ** 2 + (p1[1] - (p2[1] - sqSideLength)) ** 2))
        relDeltaX.append(abs(p1[0] - (p2[0] + sqSideLength)))
    shortest = min(relp2)
    realDeltaX = min(relDeltaX)

    for poss in range(len(relp2)):
        if shortest == relp2[poss]:
            case = poss
    if case == 0:
        xInvFact = 1
        yInvFact = 1
    elif case == 1:
        xInvFact = -1
        yInvFact = 1
    elif case == 2:
        xInvFact = 1
        yInvFact = -1
    elif case == 3:
        xInvFact = -1
        yInvFact = -1

    return shortest, realDeltaX, xInvFact, yInvFact

def pacmanEffectCOORD(p1, p1Coor):
    for dim in range(len(p1Coor)):
        p1Coor[dim] += speedList[p1][dim] * timeStep
        if p1Coor[dim] > sqSideLength / 2:
            p1Coor[dim] -= sqSideLength
        elif p1Coor[dim] < - sqSideLength / 2:
            p1Coor[dim] += sqSideLength

def TESTPrint(p1, p2, Ftot, angle, distance, speedListp1):
    print(p1, p2)
    print("Total LJ Force =", Ftot)
    print("angle       =", angle)
    print("Distance    =", distance)
    print("Speed x & y =", speedListp1)

def angleGen(p1, p2, distance, deltaX):
    if universe[p1][0] <= universe[p2][0] and universe[p1][1] <= universe[p2][1]:  # p2 is in first quadrant
        angle = math.acos(deltaX / distance)
    elif universe[p1][0] > universe[p2][0] and universe[p1][1] <= universe[p2][1]:  # p2 is in second quadrant
        angle = math.pi - math.acos(deltaX / distance)
    elif universe[p1][0] > universe[p2][0] and universe[p1][1] > universe[p2][1]:  # p2 is in third quadrant
        angle = math.pi + math.acos(deltaX / distance)
    elif universe[p1][0] <= universe[p2][0] and universe[p1][1] > universe[p2][1]:  # p2 is in fourth quadrant
        angle = 2 * math.pi - math.acos(deltaX / distance)
    return angle



def stepProcedure(universe, speedList, forceList, totKener, totLJpot, totHOpot, totENERGY):
    for step in range(steps):
        print("Step", step)
        file.write("%s \n\n" % (particlesNumber + 4))  # First line of xyz file
        file.write("Cl       %s      %s      0.00000\n" % (sqSideLength/2, sqSideLength/2))
        file.write("Cl       %s      %s      0.00000\n" % (sqSideLength/2, -sqSideLength/2))
        file.write("Cl       %s      %s      0.00000\n" % (-sqSideLength/2, sqSideLength/2))
        file.write("Cl       %s      %s      0.00000\n" % (-sqSideLength/2, -sqSideLength/2))

        for pair in range(int(len(universe) / 2)):
            p1 = pair * 2

            for dim in range(2):
                universe[p1][dim] += speedList[p1][dim] * timeStep / 2
                universe[p1 + 1][dim] += speedList[p1 + 1][dim] * timeStep / 2

            distance, deltaX, xInv, yInv = shortestDistance(universe[p1], universe[p1 + 1])

            potE_HO = (distance - rEq) ** 2
            totHOpot += potE_HO * 2  # Both particles have but only one is calculated

            FtotOsc = -k * 2 * (distance - rEq)

            angle = angleGen(p1, p1 +1, distance, deltaX)

            forceList[p1][0] = - FtotOsc * math.cos(angle) * xInv
            forceList[p1][1] = - FtotOsc * math.sin(angle) * yInv
            forceList[p1+1][0] = FtotOsc * math.cos(angle) * xInv
            forceList[p1+1][1] = FtotOsc * math.sin(angle) * yInv

        for p1 in range(len(universe)):
            if p1 % 2 == 0:
                for p2 in range(p1 + 2, particlesNumber):
                    distance, deltaX, xInv, yInv = shortestDistance(universe[p1], universe[p2])  # math.sqrt((universe[p1][0] - universe[p2][0]) ** 2 + (universe[p1][1] - universe[p2][1]) ** 2)

                    if distance < maxRay:
                        Ftot = - 24 * epsilon * (sigma ** 6) / (distance ** 7) + 48 * epsilon * (sigma ** 12) / (distance ** 13)

                        angle = angleGen(p1, p2, distance, deltaX)

                        Fx = Ftot * math.cos(angle) * xInv
                        Fy = Ftot * math.sin(angle) * yInv
                        forceList[p1][0] += - Fx
                        forceList[p1][1] += - Fy
                        forceList[p2][0] += Fx
                        forceList[p2][1] += Fy

                        totLJpot = 0
                        potE_LJ = 4 * epsilon * ((sigma / distance) ** 12 - (sigma / distance) ** 6)
                        totLJpot += potE_LJ * 2  # Both particles have but only one is calculated

                        TESTPrint(p1, p2, Ftot, angle, distance, speedList[p1])

                speedList[p1][0] += forceList[p1][0] * timeStep / 2
                speedList[p1][1] += forceList[p1][1] * timeStep / 2
                forceList[p1] = [0, 0]

                totKener = 0
                partSpeed = math.sqrt(speedList[p1][0] ** 2 + speedList[p1][1] ** 2)
                kinE = 0.5 * partSpeed ** 2
                totKener += kinE

                pacmanEffectCOORD(p1, universe[p1])
                file.write("O       %s      %s      0.00000\n" % (universe[p1][0], universe[p1][1]))

            if p1 % 2 != 0:
                for p2 in range(p1 + 1, particlesNumber):
                    distance, deltaX, xInv, yInv = shortestDistance(universe[p1], universe[p2])  # math.sqrt((universe[p1][0] - universe[p2][0]) ** 2 + (universe[p1][1] - universe[p2][1]) ** 2)

                    if distance < maxRay:
                        Ftot = - 24 * epsilon * (sigma ** 6) / (distance ** 7) + 48 * epsilon * (sigma ** 12) / (
                                    distance ** 13)

                        angle = angleGen(p1, p2, distance, deltaX)

                        Fx = Ftot * math.cos(angle) * xInv
                        Fy = Ftot * math.sin(angle) * yInv
                        forceList[p1][0] += - Fx
                        forceList[p1][1] += - Fy
                        forceList[p2][0] += Fx
                        forceList[p2][1] += Fy

                        totLJpot = 0
                        potE_LJ = 4 * epsilon * ((sigma / distance) ** 12 - (sigma / distance) ** 6)
                        totLJpot += potE_LJ * 2  # Both particles have but only one is calculated

                        TESTPrint(p1, p2, Ftot, angle, distance, speedList[p1])

                speedList[p1][0] += forceList[p1][0] * timeStep / 2
                speedList[p1][1] += forceList[p1][1] * timeStep / 2
                forceList[p1] = [0, 0]

                totKener = 0
                partSpeed = math.sqrt(speedList[p1][0] ** 2 + speedList[p1][1] ** 2)
                kinE = 0.5 * partSpeed ** 2
                totKener += kinE

                pacmanEffectCOORD(p1, universe[p1])
                file.write("O       %s      %s      0.00000\n" % (universe[p1][0], universe[p1][1]))

        totENERGY = 0
        totENERGY = totLJpot + totKener + totHOpot
        fileEnergy.write("{}       {}      {}      {}\n".format(totENERGY, totKener, totHOpot, totLJpot))

            #Calculate momenta
            #lin_mom_p1 = velocity_p1*mass_p1
            #lin_mom_p2 = velocity_p2*mass_p2
            #total_lin_mom = lin_mom_p1 + lin_mom_p2

            #ang_mom_p1 = (position_p1 - center)*velocity_p1
            #ang_mom_p2 =(position_p2 - center)*velocity_p2
            #total_ang_mom = ang_mom_p1 + ang_mom_p2
            #print momenta

def calculateLJpot(tLJpot, dist):
    potE_LJ = 4 * epsilon * ((sigma / dist) ** 12 - (sigma / dist) ** 6)
    tLJpot += potE_LJ * 2 #Both particles have but only one is calculated

def calculateKener(tKener, speedXY):
    partSpeed = math.sqrt(speedXY[0] ** 2 + speedXY[1] ** 2)
    kinE = 0.5 * partSpeed ** 2
    tKener += kinE

def calculateHOpot(tHOpot, dist):
    potE_HO = (dist - rEq) ** 2
    tHOpot += potE_HO * 2 #Both particles have but only one is calculated

if __name__ == '__main__':
    main()
